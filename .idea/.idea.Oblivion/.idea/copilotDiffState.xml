<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/World/PortalTrigger.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/World/PortalTrigger.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;[RequireComponent(typeof(Collider))]&#10;public class PortalTrigger : MonoBehaviour&#10;{&#10;    public string targetAnchorId;&#10;    public string requiredFlag;&#10;    public string setFlagOnEnter;&#10;&#10;    private bool _pendingUse;&#10;&#10;    void Reset(){ GetComponent&lt;Collider&gt;().isTrigger = true; }&#10;&#10;    void OnEnable()&#10;    {&#10;        GameBootService.OnProfileReady += HandleProfileReady;&#10;    }&#10;&#10;    void OnDisable()&#10;    {&#10;        GameBootService.OnProfileReady -= HandleProfileReady;&#10;    }&#10;&#10;    private void HandleProfileReady()&#10;    {&#10;        if (_pendingUse)&#10;        {&#10;            var player = GameObject.FindWithTag(&quot;Player&quot;);&#10;            if (player != null)&#10;            {&#10;                ProcessPortal(player);&#10;            }&#10;            _pendingUse = false;&#10;        }&#10;    }&#10;&#10;    void OnTriggerEnter(Collider other)&#10;    {&#10;        if (!other.CompareTag(&quot;Player&quot;)) return;&#10;&#10;        if (GameBootService.IsAvailable)&#10;        {&#10;            ProcessPortal(other.gameObject);&#10;        }&#10;        else&#10;        {&#10;            // Diferir hasta que el GameBootProfile esté listo&#10;            _pendingUse = true;&#10;        }&#10;    }&#10;&#10;    private void ProcessPortal(GameObject player)&#10;    {&#10;        if (string.IsNullOrEmpty(targetAnchorId))&#10;        {&#10;            Debug.LogWarning(&quot;[PortalTrigger] targetAnchorId vacío&quot;);&#10;            return;&#10;        }&#10;&#10;        var bootProfile = GameBootService.Profile;&#10;        if (bootProfile == null)&#10;        {&#10;            Debug.LogError(&quot;[PortalTrigger] GameBootProfile no disponible en GameBootService&quot;);&#10;            return;&#10;        }&#10;&#10;        var preset = bootProfile.GetActivePresetResolved();&#10;        if (preset == null)&#10;        {&#10;            Debug.LogError(&quot;[PortalTrigger] No hay preset activo&quot;);&#10;            return;&#10;        }&#10;&#10;        // Verificar flag requerida&#10;        if (!string.IsNullOrEmpty(requiredFlag))&#10;        {&#10;            if (preset.flags == null || !preset.flags.Contains(requiredFlag))&#10;            {&#10;                Debug.Log($&quot;[PortalTrigger] Flag requerida '{requiredFlag}' no encontrada. Portal bloqueado.&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Establecer flag al entrar&#10;        if (!string.IsNullOrEmpty(setFlagOnEnter))&#10;        {&#10;            if (preset.flags == null)&#10;                preset.flags = new System.Collections.Generic.List&lt;string&gt;();&#10;            &#10;            if (!preset.flags.Contains(setFlagOnEnter))&#10;            {&#10;                preset.flags.Add(setFlagOnEnter);&#10;                Debug.Log($&quot;[PortalTrigger] Flag '{setFlagOnEnter}' establecida&quot;);&#10;            }&#10;        }&#10;&#10;        TeleportService.TeleportToAnchor(player, targetAnchorId);&#10;        // NO guardar aquí&#10;    }&#10;}" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;[RequireComponent(typeof(Collider))]&#10;public class PortalTrigger : MonoBehaviour&#10;{&#10;    public string targetAnchorId;&#10;    public string requiredFlag;&#10;    public string setFlagOnEnter;&#10;&#10;    private bool _pendingUse;&#10;&#10;    void Reset(){ GetComponent&lt;Collider&gt;().isTrigger = true; }&#10;&#10;    void OnEnable()&#10;    {&#10;        GameBootService.OnProfileReady += HandleProfileReady;&#10;    }&#10;&#10;    void OnDisable()&#10;    {&#10;        GameBootService.OnProfileReady -= HandleProfileReady;&#10;    }&#10;&#10;    private void HandleProfileReady()&#10;    {&#10;        if (_pendingUse)&#10;        {&#10;            var player = GameObject.FindWithTag(&quot;Player&quot;);&#10;            if (player != null)&#10;            {&#10;                ProcessPortal(player);&#10;            }&#10;            _pendingUse = false;&#10;        }&#10;    }&#10;&#10;    void OnTriggerEnter(Collider other)&#10;    {&#10;        if (!other.CompareTag(&quot;Player&quot;)) return;&#10;&#10;        if (GameBootService.IsAvailable)&#10;        {&#10;            ProcessPortal(other.gameObject);&#10;        }&#10;        else&#10;        {&#10;            // Diferir hasta que el GameBootProfile esté listo&#10;            _pendingUse = true;&#10;        }&#10;    }&#10;&#10;    private void ProcessPortal(GameObject player)&#10;    {&#10;        if (string.IsNullOrEmpty(targetAnchorId))&#10;        {&#10;            Debug.LogWarning(&quot;[PortalTrigger] targetAnchorId vacío&quot;);&#10;            return;&#10;        }&#10;&#10;        var bootProfile = GameBootService.Profile;&#10;        if (bootProfile == null)&#10;        {&#10;            Debug.LogError(&quot;[PortalTrigger] GameBootProfile no disponible en GameBootService&quot;);&#10;            return;&#10;        }&#10;&#10;        var preset = bootProfile.GetActivePresetResolved();&#10;        if (preset == null)&#10;        {&#10;            Debug.LogError(&quot;[PortalTrigger] No hay preset activo&quot;);&#10;            return;&#10;        }&#10;&#10;        // Verificar flag requerida&#10;        if (!string.IsNullOrEmpty(requiredFlag))&#10;        {&#10;            if (preset.flags == null || !preset.flags.Contains(requiredFlag))&#10;            {&#10;                Debug.Log($&quot;[PortalTrigger] Flag requerida '{requiredFlag}' no encontrada. Portal bloqueado.&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Establecer flag al entrar&#10;        if (!string.IsNullOrEmpty(setFlagOnEnter))&#10;        {&#10;            if (preset.flags == null)&#10;                preset.flags = new System.Collections.Generic.List&lt;string&gt;();&#10;            &#10;            if (!preset.flags.Contains(setFlagOnEnter))&#10;            {&#10;                preset.flags.Add(setFlagOnEnter);&#10;                Debug.Log($&quot;[PortalTrigger] Flag '{setFlagOnEnter}' establecida&quot;);&#10;            }&#10;        }&#10;&#10;        SpawnManager.TeleportTo(targetAnchorId, true);&#10;        // NO guardar aquí&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/World/SavePoint.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/World/SavePoint.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;[RequireComponent(typeof(Collider))]&#10;public class SavePoint : MonoBehaviour&#10;{&#10;    [Header(&quot;Config&quot;)]&#10;    public string anchorIdToSet;        // si lo dejas vacío, conserva el actual&#10;    public bool healOnSave = true;&#10;    public bool teleportAfterSave;&#10;    public string teleportAnchorId;&#10;&#10;    [Header(&quot;Interacción&quot;)]&#10;    public KeyCode interactKey = KeyCode.E;&#10;    public string prompt = &quot;Guardar partida (E)&quot;;&#10;&#10;    CanvasGroup _promptCg;&#10;&#10;    // Estado para diferir el guardado si el perfil no está listo&#10;    private bool _pendingSave;&#10;    private GameObject _pendingPlayer;&#10;&#10;    void Reset(){ GetComponent&lt;Collider&gt;().isTrigger = true; }&#10;&#10;    void OnEnable()&#10;    {&#10;        GameBootService.OnProfileReady += HandleProfileReady;&#10;    }&#10;&#10;    void OnDisable()&#10;    {&#10;        GameBootService.OnProfileReady -= HandleProfileReady;&#10;    }&#10;&#10;    private void HandleProfileReady()&#10;    {&#10;        if (_pendingSave &amp;&amp; _pendingPlayer != null)&#10;        {&#10;            DoSave(_pendingPlayer);&#10;            _pendingSave = false;&#10;            _pendingPlayer = null;&#10;        }&#10;    }&#10;&#10;    void OnTriggerEnter(Collider other)&#10;    {&#10;        if (!other.CompareTag(&quot;Player&quot;)) return;&#10;        ShowPrompt(true);&#10;    }&#10;&#10;    void OnTriggerExit(Collider other)&#10;    {&#10;        if (!other.CompareTag(&quot;Player&quot;)) return;&#10;        ShowPrompt(false);&#10;    }&#10;&#10;    void OnTriggerStay(Collider other)&#10;    {&#10;        if (!other.CompareTag(&quot;Player&quot;)) return;&#10;        if (Input.GetKeyDown(interactKey))&#10;        {&#10;            if (GameBootService.IsAvailable)&#10;            {&#10;                DoSave(other.gameObject);&#10;            }&#10;            else&#10;            {&#10;                // Diferir hasta que el GameBootProfile esté listo&#10;                _pendingSave = true;&#10;                _pendingPlayer = other.gameObject;&#10;                Debug.Log(&quot;[SavePoint] Perfil no listo. Guardado diferido hasta OnProfileReady&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    void DoSave(GameObject playerGo)&#10;    {&#10;        var bootProfile = GameBootService.Profile;&#10;        if (bootProfile == null)&#10;        {&#10;            Debug.LogError(&quot;[SavePoint] GameBootProfile no disponible en GameBootService&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!string.IsNullOrEmpty(anchorIdToSet))&#10;            SpawnManager.SetCurrentAnchor(anchorIdToSet);&#10;&#10;        if (healOnSave &amp;&amp; playerGo != null)&#10;        {&#10;            // Curar al jugador a través del PlayerHealthSystem&#10;            var playerHealth = playerGo.GetComponent&lt;PlayerHealthSystem&gt;() ?? playerGo.GetComponentInParent&lt;PlayerHealthSystem&gt;();&#10;            if (playerHealth != null)&#10;            {&#10;                playerHealth.SetCurrentHealth(playerHealth.MaxHealth);&#10;            }&#10;            &#10;            // Curar maná a través del ManaPool&#10;            var manaPool = playerGo.GetComponent&lt;ManaPool&gt;() ?? playerGo.GetComponentInParent&lt;ManaPool&gt;();&#10;            if (manaPool != null)&#10;            {&#10;                manaPool.Init(manaPool.Max, manaPool.Max);&#10;            }&#10;        }&#10;&#10;        // Guardar usando GameBootProfile&#10;        var saveSystem = FindFirstObjectByType&lt;SaveSystem&gt;();&#10;        if (saveSystem != null)&#10;        {&#10;            bool success = bootProfile.SaveCurrentGameState(saveSystem);&#10;            &#10;            if (success)&#10;            {&#10;                Debug.Log(&quot;[SavePoint] Partida guardada correctamente&quot;);&#10;                OnSaveCompleted?.Invoke();&#10;            }&#10;            else&#10;            {&#10;                Debug.LogError(&quot;[SavePoint] Error al guardar la partida&quot;);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            Debug.LogError(&quot;[SavePoint] No se encontró SaveSystem&quot;);&#10;        }&#10;&#10;        // Teletransporte opcional tras guardar&#10;        if (teleportAfterSave &amp;&amp; !string.IsNullOrEmpty(teleportAnchorId) &amp;&amp; playerGo != null)&#10;        {&#10;            TeleportService.TeleportToAnchor(playerGo, teleportAnchorId);&#10;        }&#10;    }&#10;&#10;    void ShowPrompt(bool show)&#10;    {&#10;        // opcional: si tienes un Canvas local con CanvasGroup para el prompt&#10;        if (!_promptCg) _promptCg = GetComponentInChildren&lt;CanvasGroup&gt;(true);&#10;        if (_promptCg){ _promptCg.alpha = show ? 1f : 0f; _promptCg.blocksRaycasts = show; }&#10;        // si no, pon aquí tu llamada a la UI global (TextMeshPro).&#10;        if (show) Debug.Log(prompt);&#10;    }&#10;&#10;    // Evento opcional para notificar cuando la partida se guarda correctamente&#10;    public event System.Action OnSaveCompleted;&#10;}" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;[RequireComponent(typeof(Collider))]&#10;public class SavePoint : MonoBehaviour&#10;{&#10;    [Header(&quot;Config&quot;)]&#10;    public string anchorIdToSet;        // si lo dejas vacío, conserva el actual&#10;    public bool healOnSave = true;&#10;    public bool teleportAfterSave;&#10;    public string teleportAnchorId;&#10;&#10;    [Header(&quot;Interacción&quot;)]&#10;    public KeyCode interactKey = KeyCode.E;&#10;    public string prompt = &quot;Guardar partida (E)&quot;;&#10;&#10;    CanvasGroup _promptCg;&#10;&#10;    // Estado para diferir el guardado si el perfil no está listo&#10;    private bool _pendingSave;&#10;    private GameObject _pendingPlayer;&#10;&#10;    void Reset(){ GetComponent&lt;Collider&gt;().isTrigger = true; }&#10;&#10;    void OnEnable()&#10;    {&#10;        GameBootService.OnProfileReady += HandleProfileReady;&#10;    }&#10;&#10;    void OnDisable()&#10;    {&#10;        GameBootService.OnProfileReady -= HandleProfileReady;&#10;    }&#10;&#10;    private void HandleProfileReady()&#10;    {&#10;        if (_pendingSave &amp;&amp; _pendingPlayer != null)&#10;        {&#10;            DoSave(_pendingPlayer);&#10;            _pendingSave = false;&#10;            _pendingPlayer = null;&#10;        }&#10;    }&#10;&#10;    void OnTriggerEnter(Collider other)&#10;    {&#10;        if (!other.CompareTag(&quot;Player&quot;)) return;&#10;        ShowPrompt(true);&#10;    }&#10;&#10;    void OnTriggerExit(Collider other)&#10;    {&#10;        if (!other.CompareTag(&quot;Player&quot;)) return;&#10;        ShowPrompt(false);&#10;    }&#10;&#10;    void OnTriggerStay(Collider other)&#10;    {&#10;        if (!other.CompareTag(&quot;Player&quot;)) return;&#10;        if (Input.GetKeyDown(interactKey))&#10;        {&#10;            if (GameBootService.IsAvailable)&#10;            {&#10;                DoSave(other.gameObject);&#10;            }&#10;            else&#10;            {&#10;                // Diferir hasta que el GameBootProfile esté listo&#10;                _pendingSave = true;&#10;                _pendingPlayer = other.gameObject;&#10;                Debug.Log(&quot;[SavePoint] Perfil no listo. Guardado diferido hasta OnProfileReady&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    void DoSave(GameObject playerGo)&#10;    {&#10;        var bootProfile = GameBootService.Profile;&#10;        if (bootProfile == null)&#10;        {&#10;            Debug.LogError(&quot;[SavePoint] GameBootProfile no disponible en GameBootService&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!string.IsNullOrEmpty(anchorIdToSet))&#10;            SpawnManager.SetCurrentAnchor(anchorIdToSet);&#10;&#10;        if (healOnSave &amp;&amp; playerGo != null)&#10;        {&#10;            // Curar al jugador a través del PlayerHealthSystem&#10;            var playerHealth = playerGo.GetComponent&lt;PlayerHealthSystem&gt;() ?? playerGo.GetComponentInParent&lt;PlayerHealthSystem&gt;();&#10;            if (playerHealth != null)&#10;            {&#10;                playerHealth.SetCurrentHealth(playerHealth.MaxHealth);&#10;            }&#10;            &#10;            // Curar maná a través del ManaPool&#10;            var manaPool = playerGo.GetComponent&lt;ManaPool&gt;() ?? playerGo.GetComponentInParent&lt;ManaPool&gt;();&#10;            if (manaPool != null)&#10;            {&#10;                manaPool.Init(manaPool.Max, manaPool.Max);&#10;            }&#10;        }&#10;&#10;        // Guardar usando GameBootProfile&#10;        var saveSystem = FindFirstObjectByType&lt;SaveSystem&gt;();&#10;        if (saveSystem != null)&#10;        {&#10;            bool success = bootProfile.SaveCurrentGameState(saveSystem);&#10;            &#10;            if (success)&#10;            {&#10;                Debug.Log(&quot;[SavePoint] Partida guardada correctamente&quot;);&#10;                OnSaveCompleted?.Invoke();&#10;            }&#10;            else&#10;            {&#10;                Debug.LogError(&quot;[SavePoint] Error al guardar la partida&quot;);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            Debug.LogError(&quot;[SavePoint] No se encontró SaveSystem&quot;);&#10;        }&#10;&#10;        // Teletransporte opcional tras guardar&#10;        if (teleportAfterSave &amp;&amp; !string.IsNullOrEmpty(teleportAnchorId) &amp;&amp; playerGo != null)&#10;        {&#10;            SpawnManager.TeleportTo(teleportAnchorId, true);&#10;        }&#10;    }&#10;&#10;    void ShowPrompt(bool show)&#10;    {&#10;        // opcional: si tienes un Canvas local con CanvasGroup para el prompt&#10;        if (!_promptCg) _promptCg = GetComponentInChildren&lt;CanvasGroup&gt;(true);&#10;        if (_promptCg){ _promptCg.alpha = show ? 1f : 0f; _promptCg.blocksRaycasts = show; }&#10;        // si no, pon aquí tu llamada a la UI global (TextMeshPro).&#10;        if (show) Debug.Log(prompt);&#10;    }&#10;&#10;    // Evento opcional para notificar cuando la partida se guarda correctamente&#10;    public event System.Action OnSaveCompleted;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>