<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/World/PortalTrigger.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/World/PortalTrigger.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;[RequireComponent(typeof(Collider))]&#10;public class PortalTrigger : MonoBehaviour&#10;{&#10;    public string targetAnchorId;&#10;    public string requiredFlag;&#10;    public string setFlagOnEnter;&#10;&#10;    private bool _pendingUse;&#10;&#10;    void Reset(){ GetComponent&lt;Collider&gt;().isTrigger = true; }&#10;&#10;    void OnEnable()&#10;    {&#10;        GameBootService.OnProfileReady += HandleProfileReady;&#10;    }&#10;&#10;    void OnDisable()&#10;    {&#10;        GameBootService.OnProfileReady -= HandleProfileReady;&#10;    }&#10;&#10;    private void HandleProfileReady()&#10;    {&#10;        if (_pendingUse)&#10;        {&#10;            var player = GameObject.FindWithTag(&quot;Player&quot;);&#10;            if (player != null)&#10;            {&#10;                ProcessPortal(player);&#10;            }&#10;            _pendingUse = false;&#10;        }&#10;    }&#10;&#10;    void OnTriggerEnter(Collider other)&#10;    {&#10;        if (!other.CompareTag(&quot;Player&quot;)) return;&#10;&#10;        if (GameBootService.IsAvailable)&#10;        {&#10;            ProcessPortal(other.gameObject);&#10;        }&#10;        else&#10;        {&#10;            // Diferir hasta que el GameBootProfile esté listo&#10;            _pendingUse = true;&#10;        }&#10;    }&#10;&#10;    private void ProcessPortal(GameObject player)&#10;    {&#10;        if (string.IsNullOrEmpty(targetAnchorId))&#10;        {&#10;            Debug.LogWarning(&quot;[PortalTrigger] targetAnchorId vacío&quot;);&#10;            return;&#10;        }&#10;&#10;        var bootProfile = GameBootService.Profile;&#10;        if (bootProfile == null)&#10;        {&#10;            Debug.LogError(&quot;[PortalTrigger] GameBootProfile no disponible en GameBootService&quot;);&#10;            return;&#10;        }&#10;&#10;        var preset = bootProfile.GetActivePresetResolved();&#10;        if (preset == null)&#10;        {&#10;            Debug.LogError(&quot;[PortalTrigger] No hay preset activo&quot;);&#10;            return;&#10;        }&#10;&#10;        // Verificar flag requerida&#10;        if (!string.IsNullOrEmpty(requiredFlag))&#10;        {&#10;            if (preset.flags == null || !preset.flags.Contains(requiredFlag))&#10;            {&#10;                Debug.Log($&quot;[PortalTrigger] Flag requerida '{requiredFlag}' no encontrada. Portal bloqueado.&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Establecer flag al entrar&#10;        if (!string.IsNullOrEmpty(setFlagOnEnter))&#10;        {&#10;            if (preset.flags == null)&#10;                preset.flags = new System.Collections.Generic.List&lt;string&gt;();&#10;            &#10;            if (!preset.flags.Contains(setFlagOnEnter))&#10;            {&#10;                preset.flags.Add(setFlagOnEnter);&#10;                Debug.Log($&quot;[PortalTrigger] Flag '{setFlagOnEnter}' establecida&quot;);&#10;            }&#10;        }&#10;&#10;        TeleportService.TeleportToAnchor(player, targetAnchorId);&#10;        // NO guardar aquí&#10;    }&#10;}" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;[RequireComponent(typeof(Collider))]&#10;public class PortalTrigger : MonoBehaviour&#10;{&#10;    public string targetAnchorId;&#10;    public string requiredFlag;&#10;    public string setFlagOnEnter;&#10;&#10;    private bool _pendingUse;&#10;&#10;    void Reset(){ GetComponent&lt;Collider&gt;().isTrigger = true; }&#10;&#10;    void OnEnable()&#10;    {&#10;        GameBootService.OnProfileReady += HandleProfileReady;&#10;    }&#10;&#10;    void OnDisable()&#10;    {&#10;        GameBootService.OnProfileReady -= HandleProfileReady;&#10;    }&#10;&#10;    private void HandleProfileReady()&#10;    {&#10;        if (_pendingUse)&#10;        {&#10;            var player = GameObject.FindWithTag(&quot;Player&quot;);&#10;            if (player != null)&#10;            {&#10;                ProcessPortal(player);&#10;            }&#10;            _pendingUse = false;&#10;        }&#10;    }&#10;&#10;    void OnTriggerEnter(Collider other)&#10;    {&#10;        if (!other.CompareTag(&quot;Player&quot;)) return;&#10;&#10;        if (GameBootService.IsAvailable)&#10;        {&#10;            ProcessPortal(other.gameObject);&#10;        }&#10;        else&#10;        {&#10;            // Diferir hasta que el GameBootProfile esté listo&#10;            _pendingUse = true;&#10;        }&#10;    }&#10;&#10;    private void ProcessPortal(GameObject player)&#10;    {&#10;        if (string.IsNullOrEmpty(targetAnchorId))&#10;        {&#10;            Debug.LogWarning(&quot;[PortalTrigger] targetAnchorId vacío&quot;);&#10;            return;&#10;        }&#10;&#10;        var bootProfile = GameBootService.Profile;&#10;        if (bootProfile == null)&#10;        {&#10;            Debug.LogError(&quot;[PortalTrigger] GameBootProfile no disponible en GameBootService&quot;);&#10;            return;&#10;        }&#10;&#10;        var preset = bootProfile.GetActivePresetResolved();&#10;        if (preset == null)&#10;        {&#10;            Debug.LogError(&quot;[PortalTrigger] No hay preset activo&quot;);&#10;            return;&#10;        }&#10;&#10;        // Verificar flag requerida&#10;        if (!string.IsNullOrEmpty(requiredFlag))&#10;        {&#10;            if (preset.flags == null || !preset.flags.Contains(requiredFlag))&#10;            {&#10;                Debug.Log($&quot;[PortalTrigger] Flag requerida '{requiredFlag}' no encontrada. Portal bloqueado.&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Establecer flag al entrar&#10;        if (!string.IsNullOrEmpty(setFlagOnEnter))&#10;        {&#10;            if (preset.flags == null)&#10;                preset.flags = new System.Collections.Generic.List&lt;string&gt;();&#10;            &#10;            if (!preset.flags.Contains(setFlagOnEnter))&#10;            {&#10;                preset.flags.Add(setFlagOnEnter);&#10;                Debug.Log($&quot;[PortalTrigger] Flag '{setFlagOnEnter}' establecida&quot;);&#10;            }&#10;        }&#10;&#10;        SpawnManager.TeleportTo(targetAnchorId, true);&#10;        // NO guardar aquí&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>