<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/World/WorldBootstrap.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/World/WorldBootstrap.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;public class WorldBootstrap : MonoBehaviour&#10;{&#10;    private SaveSystem saveSystem;&#10;&#10;    private void Start()&#10;    {&#10;        StartCoroutine(DelayedInitialization());&#10;    }&#10;&#10;    private System.Collections.IEnumerator DelayedInitialization()&#10;    {&#10;        // Esperar hasta que GameBootService esté disponible&#10;        while (!GameBootService.IsReady())&#10;        {&#10;            yield return new WaitForSeconds(0.1f);&#10;        }&#10;&#10;        InitializeWorld();&#10;    }&#10;&#10;    private void InitializeWorld()&#10;    {&#10;        // Usar GameBootService en lugar del singleton&#10;        var bootProfile = GameBootService.GetProfile();&#10;        if (bootProfile == null)&#10;        {&#10;            Debug.LogError(&quot;[WorldBootstrap] ¡No se encontró GameBootProfile en GameBootService!&quot;);&#10;            return;&#10;        }&#10;&#10;        saveSystem = FindFirstObjectByType&lt;SaveSystem&gt;();&#10;&#10;        // 1) Modo PRESET (test): ignora el save&#10;        if (bootProfile.ShouldBootFromPreset())&#10;        {&#10;            var anchor = bootProfile.GetStartAnchorOrDefault();&#10;            SpawnManager.SetCurrentAnchor(anchor);&#10;&#10;            var playerGO = GameObject.FindWithTag(&quot;Player&quot;);&#10;            if (playerGO) TeleportService.PlaceAtAnchor(playerGO, anchor, immediate: true);&#10;&#10;            Debug.Log(&quot;[WorldBootstrap] Iniciado en modo PRESET&quot;);&#10;            return;&#10;        }&#10;&#10;        // 2) Flujo normal: intentar cargar partida&#10;        string anchorId = bootProfile.defaultAnchorId;&#10;        if (string.IsNullOrEmpty(anchorId)) anchorId = &quot;Bedroom&quot;;&#10;&#10;        if (saveSystem != null &amp;&amp; saveSystem.Load(out var data))&#10;        {&#10;            if (!string.IsNullOrEmpty(data.lastSpawnAnchorId))&#10;                anchorId = data.lastSpawnAnchorId;&#10;&#10;            // Actualizar runtimePreset con los datos del save&#10;            var slotTemplate = bootProfile.bootPreset ? bootProfile.bootPreset : bootProfile.defaultPlayerPreset;&#10;            bootProfile.SetRuntimePresetFromSave(data, slotTemplate);&#10;&#10;            Debug.Log(&quot;[WorldBootstrap] Save cargado correctamente&quot;);&#10;        }&#10;        else&#10;        {&#10;            Debug.Log(&quot;[WorldBootstrap] Sin save disponible, usando configuración por defecto&quot;);&#10;        }&#10;&#10;        // 3) Colocar jugador&#10;        SpawnManager.SetCurrentAnchor(anchorId);&#10;        var player = GameObject.FindWithTag(&quot;Player&quot;);&#10;        if (player) &#10;        {&#10;            TeleportService.PlaceAtAnchor(player, anchorId, immediate: true);&#10;            Debug.Log($&quot;[WorldBootstrap] Jugador colocado en anchor: {anchorId}&quot;);&#10;        }&#10;        else&#10;        {&#10;            Debug.LogWarning(&quot;[WorldBootstrap] No se encontró el jugador con tag 'Player'&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;public class WorldBootstrap : MonoBehaviour&#10;{&#10;    private SaveSystem _saveSystem;&#10;    private bool _initialized;&#10;&#10;    void OnEnable()&#10;    {&#10;        GameBootService.OnProfileReady += HandleProfileReady;&#10;        if (GameBootService.IsAvailable)&#10;        {&#10;            HandleProfileReady();&#10;        }&#10;    }&#10;&#10;    void OnDisable()&#10;    {&#10;        GameBootService.OnProfileReady -= HandleProfileReady;&#10;    }&#10;&#10;    private void HandleProfileReady()&#10;    {&#10;        if (_initialized) return;&#10;        InitializeWorld();&#10;        _initialized = true;&#10;        GameBootService.OnProfileReady -= HandleProfileReady;&#10;    }&#10;&#10;    private void InitializeWorld()&#10;    {&#10;        // Usar GameBootService en lugar del singleton&#10;        var bootProfile = GameBootService.Profile;&#10;        if (bootProfile == null)&#10;        {&#10;            Debug.LogError(&quot;[WorldBootstrap] ¡No se encontró GameBootProfile en GameBootService!&quot;);&#10;            return;&#10;        }&#10;&#10;        _saveSystem = FindFirstObjectByType&lt;SaveSystem&gt;();&#10;&#10;        // 1) Modo PRESET (test): ignora el save&#10;        if (bootProfile.ShouldBootFromPreset())&#10;        {&#10;            var anchor = bootProfile.GetStartAnchorOrDefault();&#10;            SpawnManager.SetCurrentAnchor(anchor);&#10;&#10;            var playerGo = GameObject.FindWithTag(&quot;Player&quot;);&#10;            if (playerGo) TeleportService.PlaceAtAnchor(playerGo, anchor, immediate: true);&#10;&#10;            Debug.Log(&quot;[WorldBootstrap] Iniciado en modo PRESET&quot;);&#10;            return;&#10;        }&#10;&#10;        // 2) Flujo normal: intentar cargar partida&#10;        string anchorId = bootProfile.defaultAnchorId;&#10;        if (string.IsNullOrEmpty(anchorId)) anchorId = &quot;Bedroom&quot;;&#10;&#10;        if (_saveSystem != null &amp;&amp; _saveSystem.Load(out var data))&#10;        {&#10;            if (!string.IsNullOrEmpty(data.lastSpawnAnchorId))&#10;                anchorId = data.lastSpawnAnchorId;&#10;&#10;            // Actualizar runtimePreset con los datos del save&#10;            var slotTemplate = bootProfile.bootPreset ? bootProfile.bootPreset : bootProfile.defaultPlayerPreset;&#10;            bootProfile.SetRuntimePresetFromSave(data, slotTemplate);&#10;&#10;            Debug.Log(&quot;[WorldBootstrap] Save cargado correctamente&quot;);&#10;        }&#10;        else&#10;        {&#10;            Debug.Log(&quot;[WorldBootstrap] Sin save disponible, usando configuración por defecto&quot;);&#10;        }&#10;&#10;        // 3) Colocar jugador&#10;        SpawnManager.SetCurrentAnchor(anchorId);&#10;        var player = GameObject.FindWithTag(&quot;Player&quot;);&#10;        if (player) &#10;        {&#10;            TeleportService.PlaceAtAnchor(player, anchorId, immediate: true);&#10;            Debug.Log($&quot;[WorldBootstrap] Jugador colocado en anchor: {anchorId}&quot;);&#10;        }&#10;        else&#10;        {&#10;            Debug.LogWarning(&quot;[WorldBootstrap] No se encontró el jugador con tag 'Player'&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>